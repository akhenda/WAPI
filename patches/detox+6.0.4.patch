patch-package
new file mode 100644
Binary files /dev/null and b/node_modules/detox/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/.DS_Store differ
old mode 100644
new mode 100755
--- a/node_modules/detox/android/build.gradle
+++ b/node_modules/detox/android/build.gradle
@@ -1,10 +1,10 @@
 buildscript {
     repositories {
         jcenter()
+        google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.3'
-        classpath 'com.palantir:jacoco-coverage:0.4.0'
+        classpath 'com.android.tools.build:gradle:3.0.1'
     }
 }
 
@@ -12,8 +12,6 @@ allprojects {
     repositories {
         mavenLocal()
         jcenter()
-        maven {
-            url "https://maven.google.com"
-        }
+        google()
     }
 }
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/.DS_Store differ
old mode 100644
new mode 100755
--- a/node_modules/detox/android/detox/build.gradle
+++ b/node_modules/detox/android/detox/build.gradle
@@ -1,10 +1,8 @@
 apply plugin: 'com.android.library'
-apply plugin: 'com.palantir.jacoco-coverage'
-apply plugin: 'com.palantir.jacoco-full-report'
 
 android {
     compileSdkVersion 25
-    buildToolsVersion '25.0.3'
+    buildToolsVersion '26.0.2'
     defaultConfig {
         minSdkVersion 18
         targetSdkVersion 25
@@ -12,25 +10,19 @@ android {
         versionName "1.0"
     }
 
-    publishNonDefault true
-
     productFlavors {
-        oldOkhttp {
+        flavorDimensions "minReactNative"
+        minReactNative44 {
+            dimension "minReactNative"
 
         }
-        newOkhttp {
-
+        minReactNative46 {
+            dimension "minReactNative"
         }
     }
 
     testOptions {
         unitTests.returnDefaultValues = true
-        unitTests.all {
-            jacoco {
-                includeNoLocationClasses = true
-            }
-        }
-
 
         unitTests.all { t ->
             reports {
@@ -65,27 +57,21 @@ android {
 }
 
 dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-
+    minReactNative44Implementation 'com.squareup.okhttp3:okhttp:3.4.1'
+    minReactNative44Implementation 'com.squareup.okhttp3:okhttp-ws:3.4.1'
 
-    oldOkhttpCompile 'com.squareup.okhttp3:okhttp:3.4.1'
-    oldOkhttpCompile 'com.squareup.okhttp3:okhttp-ws:3.4.1'
+    minReactNative46Implementation 'com.squareup.okhttp3:okhttp:3.6.0'
+    minReactNative46Implementation 'com.squareup.okio:okio:1.13.0'
 
-    newOkhttpCompile 'com.squareup.okhttp3:okhttp:3.6.0'
-    newOkhttpCompile 'com.squareup.okio:okio:1.13.0'
-
-    compile('com.android.support.test.espresso:espresso-core:3.0.0', {
+    implementation('com.android.support.test.espresso:espresso-core:3.0.0', {
         exclude group: 'com.google.code.findbugs'
     })
 
-    compile 'org.apache.commons:commons-lang3:3.4'
-
-    compile 'com.android.support.test:runner:1.0'
-    compile 'com.android.support.test:rules:1.0'
-    compile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
+    implementation 'org.apache.commons:commons-lang3:3.4'
+    implementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
 
-    testCompile 'org.json:json:20140107'
-    testCompile 'junit:junit:4.12'
-    testCompile 'org.assertj:assertj-core:3.5.2'
-    testCompile 'org.apache.commons:commons-io:1.3.2'
+    testImplementation 'org.json:json:20140107'
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.assertj:assertj-core:3.5.2'
+    testImplementation 'org.apache.commons:commons-io:1.3.2'
 }
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/main/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/main/java/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/main/java/com/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/main/java/com/wix/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/main/java/com/wix/detox/.DS_Store differ
old mode 100644
new mode 100755
--- a/node_modules/detox/android/detox/src/main/java/com/wix/detox/espresso/UiAutomatorHelper.java
+++ b/node_modules/detox/android/detox/src/main/java/com/wix/detox/espresso/UiAutomatorHelper.java
@@ -1,12 +1,10 @@
 package com.wix.detox.espresso;
 
-import android.app.UiAutomation;
 import android.content.Context;
 import android.os.Handler;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.espresso.Espresso;
 import android.support.test.espresso.ViewInteraction;
-import android.support.test.uiautomator.InstrumentationUiAutomatorBridge;
 import android.util.DisplayMetrics;
 import android.util.Log;
 import android.view.Choreographer;
@@ -26,9 +24,6 @@ import java.util.concurrent.TimeUnit;
 public class UiAutomatorHelper {
     private static final String LOG_TAG = "detox";
 
-    private static final String CLASS_INTERACTION_CONTROLLER =
-            "android.support.test.uiautomator.InteractionController";
-
     private static final String FIELD_UI_CONTROLLER = "uiController";
 
     private static final String METHOD_LOOP_UNTIL_IDLE = "loopMainThreadUntilIdle";
@@ -76,31 +71,6 @@ public class UiAutomatorHelper {
         });
     }
 
-    private static Object interactionController = null;
-
-    public static Object getInteractionController() {
-        if (interactionController != null) {
-            return interactionController;
-        }
-        UiAutomation uiAutomation;
-        if (android.os.Build.VERSION.SDK_INT >= 24) {
-            uiAutomation = InstrumentationRegistry.getInstrumentation().getUiAutomation(UiAutomation.FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES);
-        } else {
-            uiAutomation = InstrumentationRegistry.getInstrumentation().getUiAutomation();
-        }
-        Context ctx = InstrumentationRegistry.getContext();
-        InstrumentationUiAutomatorBridge bridge = new InstrumentationUiAutomatorBridge(ctx, uiAutomation);
-        Class<?> interActionControllerClass;
-        try {
-            interActionControllerClass = Class.forName(CLASS_INTERACTION_CONTROLLER);
-        } catch (ClassNotFoundException e) {
-            Log.e(LOG_TAG, "Can't find InteractionController class. UiAutomator is not on classpath?", e);
-            throw new RuntimeException(e);
-        }
-        interactionController = Reflect.on(interActionControllerClass).create(bridge).get();
-        return interactionController;
-    }
-
     public static float getDensity() {
         Context context = InstrumentationRegistry.getTargetContext().getApplicationContext();
         return context.getResources().getDisplayMetrics().density;
new file mode 100644
--- /dev/null
+++ b/node_modules/detox/android/detox/src/minReactNative44/java/com/wix/detox/WebSocketClient.java
@@ -0,0 +1,193 @@
+package com.wix.detox;
+
+import android.util.Log;
+
+import com.wix.detox.systeminfo.Environment;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.ws.WebSocket;
+import okhttp3.ws.WebSocketCall;
+import okhttp3.ws.WebSocketListener;
+import okio.Buffer;
+
+import static okhttp3.ws.WebSocket.TEXT;
+
+/**
+ * Created by rotemm on 27/12/2016.
+ */
+
+public class WebSocketClient implements WebSocketListener {
+
+    @Override
+    public void onOpen(WebSocket webSocket, Response response) {
+        Log.i(LOG_TAG, "At onOpen");
+        this.websocket = webSocket;
+        HashMap params = new HashMap();
+        params.put("sessionId", sessionId);
+        params.put("role", "testee");
+        sendAction("login", params, 0L);
+        actionHandler.onConnect();
+    }
+
+    @Override
+    public void onFailure(IOException e, Response response) {
+        Log.e(LOG_TAG, "Detox Error: ", e);
+
+        //OKHttp won't recover from failure if it got ConnectException,
+        // this is a workaround to make the websocket client try reconnecting when failed.
+        try {
+            Thread.sleep(1000);
+        } catch (InterruptedException e2) {
+            Log.d(LOG_TAG, "interrupted", e2);
+        }
+        Log.d(LOG_TAG, "Retrying...");
+        connectToServer(url, sessionId);
+    }
+
+    @Override
+    public void onMessage(ResponseBody message) throws IOException {
+        Log.i(LOG_TAG, "At onMessage");
+        if (message.contentType() == WebSocket.TEXT) {
+            StringBuffer sb = new StringBuffer();
+            String line;
+            BufferedReader buffer = new BufferedReader(message.charStream());
+            while ((line = buffer.readLine()) != null) {
+                sb.append(line);
+            }
+            receiveAction(websocket, sb.toString());
+        }
+        message.close();
+    }
+
+    @Override
+    public void onPong(Buffer payload) {
+        // empty
+    }
+
+    private volatile boolean closing = false;
+
+    @Override
+    public void onClose(int code, String reason) {
+        Log.i(LOG_TAG, "At onClose");
+        Log.d(LOG_TAG, "Detox Closed: " + code + " " + reason);
+        closing = true;
+        actionHandler.onClosed();
+    }
+
+    public void close() {
+        if (closing) {
+            return;
+        }
+        closing = true;
+        try {
+            websocket.close(NORMAL_CLOSURE_STATUS, null);
+        } catch (IOException e) {
+            Log.i(LOG_TAG, "WS close", e);
+        } catch (IllegalStateException e) {
+            Log.i(LOG_TAG, "WS close", e);
+        }
+    }
+
+    private static final String LOG_TAG = "WebSocketClient";
+
+    private String url;
+    private String sessionId;
+    private OkHttpClient client;
+    private WebSocket websocket = null;
+    private ActionHandler actionHandler;
+
+    private static final int NORMAL_CLOSURE_STATUS = 1000;
+
+    public WebSocketClient(ActionHandler actionHandler) {
+        this.actionHandler = actionHandler;
+    }
+
+    public void connectToServer(String sessionId) {
+
+        connectToServer(Environment.getServerHost(), sessionId);
+    }
+
+    public void connectToServer(String url, String sessionId) {
+        Log.i(LOG_TAG, "At connectToServer");
+        this.url = url;
+        this.sessionId = sessionId;
+
+        client = new OkHttpClient.Builder().
+                retryOnConnectionFailure(true).
+                connectTimeout(1500, TimeUnit.MILLISECONDS).
+                readTimeout(0, TimeUnit.MILLISECONDS).build();
+
+        Request request = new Request.Builder().url(url).build();
+
+        WebSocketCall.create(client, request).enqueue(this);
+
+        client.dispatcher().executorService().shutdown();
+    }
+
+    public void sendAction(String type, Map params, Long messageId) {
+        Log.i(LOG_TAG, "At sendAction");
+        HashMap data = new HashMap();
+        data.put("type", type);
+        data.put("params", params);
+        data.put("messageId", messageId);
+
+        JSONObject json = new JSONObject(data);
+        try {
+            websocket.sendMessage(RequestBody.create(TEXT, json.toString()));
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "Error sending msg through WS", e);
+        }
+
+        Log.d(LOG_TAG, "Detox Action Sent: " + type);
+
+    }
+
+    public void receiveAction(WebSocket webSocket,  String json) {
+        Log.i(LOG_TAG, "At receiveAction");
+        try {
+            JSONObject object = new JSONObject(json);
+
+            String type = (String) object.get("type");
+            if (type == null) {
+                Log.e(LOG_TAG, "Detox Error: receiveAction missing type");
+                return;
+            }
+
+            Object params = object.get("params");
+            if (params != null && !(params instanceof JSONObject)) {
+                Log.d(LOG_TAG, "Detox Error: receiveAction invalid params");
+            }
+            long messageId = object.getLong("messageId");
+
+            Log.d(LOG_TAG, "Detox Action Received: " + type);
+
+            if (actionHandler != null) actionHandler.onAction(type, params.toString(), messageId);
+        } catch (JSONException e) {
+            Log.e(LOG_TAG, "Detox Error: receiveAction decode - " + e.toString());
+        }
+
+    }
+
+    /**
+     * These methods are called on an inner worker thread.
+     * @see <a href="https://medium.com/@jakewharton/listener-messages-are-called-on-a-background-thread-since-okhttp-is-agnostic-with-respect-to-5fdc5182e240">OkHTTP</a>
+     */
+    public interface ActionHandler {
+        void onAction(String type, String params, long messageId);
+        void onConnect();
+        void onClosed();
+    }
+}
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/minReactNative46/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/minReactNative46/java/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/minReactNative46/java/com/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/detox/src/minReactNative46/java/com/wix/.DS_Store differ
new file mode 100644
--- /dev/null
+++ b/node_modules/detox/android/detox/src/minReactNative46/java/com/wix/detox/WebSocketClient.java
@@ -0,0 +1,167 @@
+package com.wix.detox;
+
+import android.util.Log;
+
+import com.wix.detox.systeminfo.Environment;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.WebSocket;
+import okhttp3.WebSocketListener;
+import okio.ByteString;
+
+/**
+ * Created by rotemm on 27/12/2016.
+ */
+
+public class WebSocketClient extends WebSocketListener {
+
+    @Override
+    public void onOpen(WebSocket webSocket, Response response) {
+        Log.i(LOG_TAG, "At onOpen");
+        HashMap params = new HashMap();
+        params.put("sessionId", sessionId);
+        params.put("role", "testee");
+        sendAction("login", params, 0L);
+        actionHandler.onConnect();
+    }
+
+    @Override
+    public void onFailure(WebSocket webSocket, Throwable t, Response response) {
+        Log.e(LOG_TAG, "Detox Error: ", t);
+
+        //OKHttp won't recover from failure if it got ConnectException,
+        // this is a workaround to make the websocket client try reconnecting when failed.
+        try {
+            Thread.sleep(1000);
+        } catch (InterruptedException e2) {
+            Log.d(LOG_TAG, "interrupted", e2);
+        }
+        Log.d(LOG_TAG, "Retrying...");
+        connectToServer(url, sessionId);
+    }
+
+    @Override
+    public void onMessage(WebSocket webSocket, String text) {
+        Log.i(LOG_TAG, "At onMessage");
+        receiveAction(websocket, text);
+    }
+
+    @Override
+    public void onMessage(WebSocket webSocket, ByteString bytes) {
+        Log.e(LOG_TAG, "Unexpected binary ws message from detox server.");
+    }
+
+    private volatile boolean closing = false;
+
+    @Override
+    public void onClosed(WebSocket webSocket, int code, String reason) {
+        Log.d(LOG_TAG, "Detox WS Closed: " + code + " " + reason);
+        closing = true;
+        actionHandler.onClosed();
+    }
+
+    @Override
+    public void onClosing(WebSocket webSocket, int code, String reason) {
+        Log.i(LOG_TAG, "At onClose");
+        closing = true;
+        websocket.close(NORMAL_CLOSURE_STATUS, null);
+    }
+
+    public void close() {
+        if (closing) return;
+        closing = true;
+        websocket.close(NORMAL_CLOSURE_STATUS, null);
+    }
+
+    private static final String LOG_TAG = "WebSocketClient";
+
+    private String url;
+    private String sessionId;
+    private OkHttpClient client;
+    private WebSocket websocket = null;
+    private ActionHandler actionHandler;
+
+    private static final int NORMAL_CLOSURE_STATUS = 1000;
+
+    public WebSocketClient(ActionHandler actionHandler) {
+        this.actionHandler = actionHandler;
+    }
+
+    public void connectToServer(String sessionId) {
+
+        connectToServer(Environment.getServerHost(), sessionId);
+    }
+
+    public void connectToServer(String url, String sessionId) {
+        Log.i(LOG_TAG, "At connectToServer");
+        this.url = url;
+        this.sessionId = sessionId;
+
+        client = new OkHttpClient.Builder().
+                retryOnConnectionFailure(true).
+                connectTimeout(1500, TimeUnit.MILLISECONDS).
+                readTimeout(0, TimeUnit.MILLISECONDS).build();
+
+        Request request = new Request.Builder().url(url).build();
+
+        this.websocket = client.newWebSocket(request, this);
+
+        client.dispatcher().executorService().shutdown();
+    }
+
+    public void sendAction(String type, Map params, Long messageId) {
+        Log.i(LOG_TAG, "At sendAction");
+        HashMap data = new HashMap();
+        data.put("type", type);
+        data.put("params", params);
+        data.put("messageId", messageId);
+        JSONObject json = new JSONObject(data);
+
+        websocket.send(json.toString());
+        Log.d(LOG_TAG, "Detox Action Sent: " + type);
+    }
+
+    public void receiveAction(WebSocket webSocket,  String json) {
+        Log.i(LOG_TAG, "At receiveAction");
+        try {
+            JSONObject object = new JSONObject(json);
+
+            String type = (String) object.get("type");
+            if (type == null) {
+                Log.e(LOG_TAG, "Detox Error: receiveAction missing type");
+                return;
+            }
+
+            Object params = object.get("params");
+            if (params != null && !(params instanceof JSONObject)) {
+                Log.d(LOG_TAG, "Detox Error: receiveAction invalid params");
+            }
+            long messageId = object.getLong("messageId");
+
+            Log.d(LOG_TAG, "Detox Action Received: " + type);
+
+            if (actionHandler != null) actionHandler.onAction(type, params.toString(), messageId);
+        } catch (JSONException e) {
+            Log.e(LOG_TAG, "Detox Error: receiveAction decode - " + e.toString());
+        }
+    }
+
+    /**
+     * These methods are called on an inner worker thread.
+     * @see <a href="https://medium.com/@jakewharton/listener-messages-are-called-on-a-background-thread-since-okhttp-is-agnostic-with-respect-to-5fdc5182e240">OkHTTP</a>
+     */
+    public interface ActionHandler {
+        void onAction(String type, String params, long messageId);
+        void onConnect();
+        void onClosed();
+    }
+}
new file mode 100644
Binary files /dev/null and b/node_modules/detox/android/gradle/.DS_Store differ
old mode 100644
new mode 100755
--- a/node_modules/detox/android/gradle/wrapper/gradle-wrapper.properties
+++ b/node_modules/detox/android/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sun Jun 25 19:58:35 IDT 2017
+#Wed Dec 20 14:09:27 IST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
new file mode 100644
Binary files /dev/null and b/node_modules/detox/src/.DS_Store differ
new file mode 100644
Binary files /dev/null and b/node_modules/detox/src/devices/.DS_Store differ
old mode 100644
new mode 100755
--- a/node_modules/detox/src/devices/AndroidDriver.js
+++ b/node_modules/detox/src/devices/AndroidDriver.js
@@ -1,4 +1,6 @@
 const {spawn} = require('child_process');
+const path = require('path');
+const fs = require('fs');
 const _ = require('lodash');
 const log = require('npmlog');
 const invoke = require('../invoke');
@@ -27,8 +29,20 @@ class AndroidDriver extends DeviceDriverBase {
 
   async installApp(deviceId, binaryPath) {
     await this.adb.install(deviceId, binaryPath);
-    const testApkPath = binaryPath.split('.apk')[0] + '-androidTest.apk';
-    await this.adb.install(deviceId, testApkPath);
+    await this.adb.install(deviceId, this.getTestApkPath(binaryPath));
+  }
+
+  getTestApkPath(originalApkPath) {
+    const originalApkPathObj = path.parse(originalApkPath);
+    let splitPath = originalApkPathObj.dir.split(path.sep);
+    splitPath.splice(splitPath.length-1 , 0, 'androidTest');
+    const testApkPath = path.join(splitPath.join(path.sep), `${originalApkPathObj.name}-androidTest${originalApkPathObj.ext}`);
+
+    if (!fs.existsSync(testApkPath)) {
+      throw new Error(`'${testApkPath}' could not be found, did you run './gradlew assembleAndroidTest' ?`);
+    }
+
+    return testApkPath;
   }
 
   async uninstallApp(deviceId, bundleId) {
old mode 100644
new mode 100755
--- a/node_modules/detox/src/devices/android/Emulator.js
+++ b/node_modules/detox/src/devices/android/Emulator.js
@@ -56,7 +56,7 @@ class Emulator {
       tail.unwatch();
       fs.closeSync(stdout);
       fs.closeSync(stderr);
-      fs.unlink(tempLog);
+      fs.unlink(tempLog, () => {});
       promise._cpResolve();
     }
 
